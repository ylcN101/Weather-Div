(()=>{const onSelectCity=event=>{const selectedCity=event.target.value;updateWeather(selectedCity)},updateWeather=async cityName=>{const weather=await fetchWeather(cityName);!weather.error&&weather||openErrorModal(),renderCurrentWeather(weather),renderWeather(weather);document.querySelector(".headerWeather").innerText=`Weather In ${weather.location.name}, ${weather.location.country}`;document.querySelector(".citySelect").value=weather.location.name},fetchWeather=async cityName=>{const apiUrl=`http://api.weatherapi.com/v1/forecast.json?key=327b017e746e450fa1f80145230412&q=${cityName}&days=14&`;try{const response=await fetch(apiUrl);return await response.json()}catch(error){return console.error("Error fetching weather from API:",error),openErrorModal(),null}},renderCurrentWeather=weather=>{const{last_updated:lastUpdated,condition:condition,temp_c:tempC}=weather.current,currentDay=new Date(lastUpdated).toLocaleDateString("en-US",{weekday:"long",month:"long",day:"numeric"}),{text:currentWeatherDescription,icon:currentIcon}=condition,iconUrl=`https:${currentIcon}`;document.querySelector(".currentWeather").innerHTML=`\n      <div class="currentDay">${currentDay}</div>\n      <div class="weather">\n        <div class="icon"><img src="${iconUrl}" alt="logo" /></div>\n        <div class="description">${currentWeatherDescription}</div>\n      </div>\n      <div class="currentTemp">${tempC}°C</div>\n    `},renderWeather=weather=>{const forecast=weather.forecast.forecastday,days=getDays(forecast),averageTemps=getAverageTemps(forecast),icons=getIcons(forecast),weatherDiv=document.querySelector(".weatherList");weatherDiv.innerHTML="",days.forEach(((day,index)=>{const temp=averageTemps[index],icon=icons[index],description=forecast[index].day.condition.text,iconUrl=`https:${icon}`,weatherItem=document.createElement("div");weatherItem.classList.add("weatherItem"),weatherItem.innerHTML=`\n        <div class="day">${day}</div>\n        <div class="weather">\n          <div class="icon">\n            <img src="${iconUrl}" alt="logo"/>\n          </div>\n        </div>\n        <div class="descriptionWeather">${description}</div>\n        <div class="temp">${temp.toFixed(0)}°C</div>\n      `,weatherDiv.appendChild(weatherItem)}))},openErrorModal=()=>{document.querySelector(".modal").style.display="block";document.querySelector(".modalContent").innerHTML='\n      <div class="modalHeader">\n        <h2>City Not Found</h2>\n      </div>\n      <div class="modalBody">\n        <p>Please try again</p>\n      </div>\n      <button class="close">Close</button>\n    ';document.querySelector(".close").addEventListener("click",closeModal)},closeModal=()=>{document.querySelector(".modal").style.display="none"},getCities=async()=>{try{const res=await fetch("https://restcountries.com/v3.1/all"),countries=await res.json();return countries.map((({capital:capital,name:name})=>({name:capital,country:name.common})))}catch(error){return console.error("Error fetching cities from API:",error),null}},getDays=forecast=>{const days=[];return forecast.forEach((item=>{const day=new Date(item.date).toLocaleDateString("en-US",{weekday:"long"});days.includes(day)||days.push(day)})),days.shift(),days},getAverageTemps=forecast=>{const averageTemps=[];return getDays(forecast).forEach((day=>{const temps=forecast.filter((item=>new Date(item.date).toLocaleDateString("en-US",{weekday:"long"})===day)).map((item=>item.day.avgtemp_c)),averageTemp=temps.reduce(((a,b)=>a+b))/temps.length;averageTemps.push(averageTemp)})),averageTemps},getIcons=forecast=>{const resultIcons=[];return getDays(forecast).forEach((day=>{const iconsForDay=forecast.filter((item=>new Date(item.date).toLocaleDateString("en-US",{weekday:"long"})===day)).map((item=>item.day.condition.icon)),mostFrequentIcon=getMostFrequent(iconsForDay);resultIcons.push(mostFrequentIcon)})),resultIcons},getMostFrequent=arr=>{const map={};let mostFrequent=arr[0],maxCount=1;for(let i=0;i<arr.length;i++){const el=arr[i];null==map[el]?map[el]=1:map[el]++,map[el]>maxCount&&(mostFrequent=el,maxCount=map[el])}return mostFrequent};window.onSearchCity=event=>{event.preventDefault();try{const cityName=document.querySelector(".cityInput").value;if(!cityName||""===cityName)return void openErrorModal();updateWeather(cityName)}catch(error){openErrorModal()}document.querySelector(".weatherForm").reset()},(()=>{const weatherContainer=document.createElement("div");weatherContainer.id="weatherContainer",weatherContainer.innerHTML='\n      <style>\n      * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      font-family: \'Montserrat\', sans-serif;\n      background-color: #f5f5f5;\n    }\n    #weatherContainer {\n      padding: 1em;\n      gap: 1em;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .headerWeather {\n      font-size: 1.5em;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    \n    .weatherBox {\n      margin-top: 1.5em;\n      background-color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      border-radius: 0.313em;\n    }\n    .weatherSearch {\n      gap: 1em;\n      display: flex;\n      align-items: center;\n    }\n    .weatherList {\n      color: #7a7a7f;\n      background-color: #fff;\n      display: flex;\n      flex-wrap: wrap;\n      border-radius: 0.313em;\n    }\n    \n    .weatherItem {\n      display: flex;\n      flex: 0 0 calc(33.33%);\n      flex-direction: column;\n      align-items: center;\n      justify-content: space-around;\n      gap: 0.5em;\n      padding: 1em;\n      &:nth-last-child(-n + 3) {\n        box-shadow: 0px 0px -0.3px 0px rgba(122, 122, 127, 0.75);\n        -webkit-box-shadow: 0px -0.3px 0px 0px rgba(122, 122, 127, 0.75);\n        -moz-box-shadow: 0px -0.3px 0px 0px rgba(122, 122, 127, 0.75);\n      }\n    }\n    \n    .currentWeather {\n      color: #fff;\n      width: 50%;\n      height: 32em;\n      background-color: #202050;\n      display: flex;\n      justify-content: space-between;\n      padding: 3em 0px 1.5em 0px;\n      flex-direction: column;\n      align-items: center;\n      border-radius: 0.313em;\n    }\n    .currentDay {\n      display: flex;\n      justify-content: center;\n      font-size: 1.5em;\n      font-weight: 700;\n    }\n    .day {\n      display: flex;\n      justify-content: center;\n      font-weight: 700;\n    }\n    .weather {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .weather img {\n      width: 7em;\n    }\n    .descriptionWeather {\n      margin-bottom: 0.5em;\n    }\n    .temp {\n      font-size: 1.2em;\n      font-weight: 700;\n    }\n    .currentTemp {\n      font-size: 2em;\n      font-weight: 700;\n    }\n    .modal {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100vh;\n      background-color: rgba(0, 0, 0, 0.5);\n      display: none;\n      justify-content: center;\n      align-items: center;\n    }\n    .modalContent {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      width: 40%;\n      height: 40%;\n      background-color: #fff;\n      transform: translate(-50%, -50%);\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 0.5em;\n      border-radius: 1.25em;\n      justify-content: space-evenly;\n    }\n    .modalHeader {\n      padding: 1em;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .modalBody {\n      margin-top: 2em;\n      gap: 1.5em;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    }\n    .close {\n      margin-top: 8em;\n      width: 50%;\n      padding: 1em;\n      cursor: pointer;\n    }\n    .dropdownWeather {\n      width: 20%;\n    }\n    .selectDropdown {\n      position: relative;\n      background-color: #e6e6e6;\n      border-radius: 0.25em;\n      margin-top: 0.625em;\n    }\n    .selectDropdown select {\n      font-size: 1rem;\n      font-weight: normal;\n      max-width: 100%;\n      padding: 0.5em 1.5em 0.5em 0.625em;\n      border: none;\n      background-color: transparent;\n      appearance: none;\n    }\n    .selectDropdown select:active,\n    .selectDropdown select:focus {\n      outline: none;\n      box-shadow: none;\n    }\n    .selectDropdown:after {\n      content: \'\';\n      position: absolute;\n      top: 50%;\n      right: 0.5em;\n      width: 0;\n      height: 0;\n      margin-top: -2px;\n      border-top: 0.313em solid #aaa;\n      border-right: 0.313em solid transparent;\n      border-left: 0.313em solid transparent;\n    }\n    .weatherForm {\n      display: flex;\n      gap: 1em;\n      justify-content: center;\n      align-self: end;\n    }\n    .weatherForm input {\n      font-size: 1rem;\n      padding: 0.5em 1.5em 0.5em 0.625em;\n      border-radius: 0.313em;\n      border: none;\n      outline: none;\n      background-color: #e6e6e6;\n      font-size: 1rem;\n    }\n    \n    .weatherForm button:hover {\n      background-color: #e6e6e6;\n    }\n    \n    @media (max-width: 945px) {\n      .weatherBox {\n        flex-direction: column;\n      }\n      .weatherSearch {\n        justify-content: center;\n      }\n      .dropdownWeather {\n        width: 46%;\n      }\n      .currentWeather {\n        width: 100%;\n      }\n    }\n    \n    @media (max-width: 596px) {\n      .weatherSearch {\n        width: 92%;\n        flex-direction: column;\n        align-self: center;\n      }\n      .headerWeather {\n        font-size: 1em;\n      }\n      .dropdownWeather h3 {\n        margin-left: 4em;\n        font-size: 1em;\n      }\n      .dropdownWeather {\n        width: 80%;\n      }\n      .weatherItem {\n        flex: 0 0 calc(50%);\n        &:nth-last-child(-n + 3) {\n          box-shadow: none;\n        }\n      }\n      .weatherForm {\n        width: 85%;\n      }\n    }\n    \n    .weatherSearchBtn {\n      font-family: \'Montserrat\', sans-serif;\n      appearance: none;\n      background-color: #fafbfc;\n      border: 0.063em solid rgba(27, 31, 35, 0.15);\n      border-radius: 0.375em;\n      box-shadow: rgba(27, 31, 35, 0.04) 0 1px 0, rgba(255, 255, 255, 0.25) 0 1px 0 inset;\n      box-sizing: border-box;\n      color: #24292e;\n      cursor: pointer;\n      display: inline-block;\n      font-weight: 800;\n      list-style: none;\n      padding: 0.375em 1em;\n      position: relative;\n      transition: background-color 0.2s cubic-bezier(0.3, 0, 0.5, 1);\n      user-select: none;\n      -webkit-user-select: none;\n      touch-action: manipulation;\n      vertical-align: middle;\n      white-space: nowrap;\n      word-wrap: break-word;\n    }\n    \n    .weatherSearchBtn:hover {\n      background-color: #f3f4f6;\n      text-decoration: none;\n      transition-duration: 0.1s;\n    }\n    \n    .weatherSearchBtn:disabled {\n      background-color: #fafbfc;\n      border-color: rgba(27, 31, 35, 0.15);\n      color: #959da5;\n      cursor: default;\n    }\n    \n    .weatherSearchBtn:active {\n      background-color: #edeff2;\n      box-shadow: rgba(225, 228, 232, 0.2) 0 1px 0 inset;\n      transition: none 0s;\n    }\n    \n    .weatherSearchBtn:focus {\n      outline: 1px transparent;\n    }\n    \n    .weatherSearchBtn:before {\n      display: none;\n    }\n    \n    .weatherSearchBtn:-webkit-details-marker {\n      display: none;\n    }\n    \n      </style>\n      <h1 class="headerWeather">Weather</h1>\n      <div class="modal">\n        <div class="modalContent">\n          <span class="close">&times;</span>\n          <p class="modalText"></p>\n        </div>\n      </div>\n      <div class="weatherSearch">\n        <div class="dropdownWeather">\n          <h3>Search By City</h3>\n          <div class="selectDropdown">\n            <select name="citySelect" class="citySelect"></select>\n          </div>\n        </div>\n        <form id="weatherForm" class="weatherForm">\n          <input type="text" name="cityInput" class="cityInput" />\n          <button class="weatherSearchBtn" onclick="onSearchCity(event)">\n            <span>Search</span>\n          </button>\n        </form>\n      </div>\n      <div class="weatherBox">\n        <div class="currentWeather"></div>\n        <div class="weatherList"></div>\n      </div>\n    ';const container=document.getElementById("weatherContainer");container?container.parentNode.replaceChild(weatherContainer,container):document.body.appendChild(weatherContainer)})(),(async()=>{const cities=await getCities(),select=document.querySelector(".citySelect");cities.forEach((({name:name,country:country})=>{const option=document.createElement("option");option.value=name,option.innerText=`${name}, ${country}`,select.appendChild(option)}));updateWeather("London"),select.addEventListener("change",onSelectCity)})()})();